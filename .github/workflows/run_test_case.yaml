name: Run test cases

on: [push, pull_request]

jobs:

  windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v1
    - uses: ilammy/msvc-dev-cmd@v1
    - uses: gleam-lang/setup-erlang@v1.1.0
      id: install_erlang
      with:
        otp-version: 22.3
    - name: Run tests
      run: |
        $env:PATH = "${{ steps.install_erlang.outputs.erlpath }}\bin;$env:PATH"

        $rebar3 = $env:USERPROFILE + "\rebar3"
        (New-Object System.Net.WebClient).DownloadFile('https://github.com/emqx/rebar3/releases/download/3.14.3-emqx-4/rebar3', $rebar3)

        escript $rebar3 xref
        escript $rebar3 dialyzer
        escript $rebar3 eunit
        escript $rebar3 ct
  mac:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v1
    - name: prepare
      run: |
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        brew install curl zip unzip gnu-sed erlang openssl@1.1
        echo "/usr/local/bin:$PATH" >> ~/.bashrc
    - name: install rebar3
      run: |
        curl -fsSL -o /usr/local/bin/rebar3 https://github.com/emqx/rebar3/releases/download/3.14.3-emqx-4/rebar3
        chmod +x /usr/local/bin/rebar3
    - name: Code analyze
      run: |
        make xref
        make dialyzer
    - name: Run tests
      run: |
        make eunit
        make ct

  linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os:
          - ubuntu18.04
          - ubuntu16.04
          - ubuntu14.04
          - debian10
          - debian9
          - debian8
          - opensuse
          - centos7
          - centos6
          - raspbian10
          - raspbian9
          - raspbian8

    steps:
    - uses: actions/checkout@v1
    - name: Code analyze
      env:
        ERL_OTP: erl22.1
        SYSTEM: ${{ matrix.os }}
      run: |
        version=$(echo ${{ github.ref }} | sed -r  "s .*/.*/(.*) \1 g")
        sudo docker run --rm --privileged multiarch/qemu-user-static:register --reset
        sudo docker run --rm -i --name $SYSTEM -v $(pwd):/repos emqx/build-env:$ERL_OTP-$SYSTEM sh -c "cd /repos && make xref && make dialyzer"
    - name: Run tests
      env:
        ERL_OTP: erl22.1
        SYSTEM: ${{ matrix.os }}
      run: |
        version=$(echo ${{ github.ref }} | sed -r  "s .*/.*/(.*) \1 g")
        sudo docker run --rm --privileged multiarch/qemu-user-static:register --reset
        sudo docker run --rm -i --name $SYSTEM -v $(pwd):/repos emqx/build-env:$ERL_OTP-$SYSTEM sh -c "cd /repos && make eunit && make ct"

  docker:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Code analyze
      env:
        ERL_OTP: erl22.1
      run: docker run --rm -i --name alpine -v $(pwd):/repos emqx/build-env:$ERL_OTP-alpine3.10-amd64 sh -c "cd /repos && make xref && make dialyzer"
    - name: Run tests
      env:
        ERL_OTP: erl22.1
      run: docker run --rm -i --name alpine -v $(pwd):/repos emqx/build-env:$ERL_OTP-alpine3.10-amd64 sh -c "cd /repos && make eunit && make ct"
